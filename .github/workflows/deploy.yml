name: deploy

on:
  push:
    branches: [ main ]

jobs:
  publish:
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for release notes

      - name: Install Node and NPM
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: git fetch --all --tags

      - name: Version Check
        uses: thebongy/version-check@v2
        with:
          file: package.json
          tagFormat: v${version}
          failBuild: true
        id: version_check

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7,darwin/amd64,darwin/arm64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install
        run: npm install

      - name: Set repository name lowercase
        run: |
          echo "REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build & Push Multi-Architecture Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7,darwin/amd64,darwin/arm64
          tags: |
            ghcr.io/${{ env.REPO_LOWER }}:latest
            ghcr.io/${{ env.REPO_LOWER }}:v${{ steps.version_check.outputs.rawVersion }}

      - name: Create Release
        if: steps.version_check.outputs.versionChanged == 'true'
        run: |
          # Get the previous version tag or initial commit
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo $(git rev-list --max-parents=0 HEAD))
          CURR_TAG="v${{ steps.version_check.outputs.rawVersion }}"

          # Initialize release notes file
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md

          # Get all commits between previous tag and HEAD
          for COMMIT_HASH in $(git log --no-merges --pretty=format:"%H" $PREV_TAG..HEAD); do
            # Get commit message
            COMMIT_MSG=$(git log --format=%B -n 1 $COMMIT_HASH)

            # Extract PR number if present
            PR_NUM=$(echo "$COMMIT_MSG" | grep -o "#[0-9]\+" | head -1 | tr -d "#")

            if [ -n "$PR_NUM" ]; then
              # PR number found, get commits from this PR
              echo "### $COMMIT_MSG" >> release_notes.md

              PR_COMMITS=$(gh pr view $PR_NUM --json commits --jq '.commits[].messageHeadline')

              if [ -n "$PR_COMMITS" ]; then
                # Add indented PR commits to notes, but filter out the main PR commit
                echo "$PR_COMMITS" | grep -v "Merge" | grep -v "$COMMIT_MSG" | sed 's/^/  - /' >> release_notes.md
              fi
            else
              # Regular commit, not from a squashed PR
              echo "* $COMMIT_MSG" >> release_notes.md
            fi
          done

          gh release create "$CURR_TAG" --title "$CURR_TAG" --notes-file release_notes.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: AButler/upload-release-assets@v2.0
        with:
          files: 'docker-compose*'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: "v${{ steps.version_check.outputs.rawVersion }}"

