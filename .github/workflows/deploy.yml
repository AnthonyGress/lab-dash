name: deploy

on:
  push:
    branches: [ main ]

jobs:
  publish:
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper release notes

      - name: Install Node and NPM
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install
        run: npm install

      - name: Build & Push Docker Image
        run: |
          npm run docker:build
          npm run docker:push

      - run: git fetch --all --tags

      - name: Version Check
        uses: thebongy/version-check@v2
        with:
          file: package.json
          tagFormat: v${version}
          failBuild: false
        id: version_check

      - name: Create Release
        if: steps.version_check.outputs.versionChanged == 'true'
        run: |
          # Get the previous version tag
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # If no previous tag exists, use the first commit
            PREV_COMMIT=$(git rev-list --max-parents=0 HEAD)
            COMMIT_RANGE="$PREV_COMMIT..HEAD"
          else
            COMMIT_RANGE="$PREV_TAG..HEAD"
          fi

          # Generate release notes with commit messages
          RELEASE_NOTES=$(echo -e "## What's Changed\n\n")
          RELEASE_NOTES+=$(git log $COMMIT_RANGE --pretty=format:"* %s" --no-merges)

          # Create release with the generated notes
          gh release create "v${{ steps.version_check.outputs.rawVersion }}" --notes "$RELEASE_NOTES"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


